21:35

The code must be in C/C++ (No Assembly) for troubleshooting purpose.


I have many Arduino UNO R3 Shields which use PWM signals and I want the STM32F334 do replace the UNO.

1) I would like to have the code written with (TIMER) in direct register manipulation, for example:

/* TIMER2 PRESCALER */
TIM2->PSC = 1 ;

/* SOMETHING ABOUT TIMER2 */
TIM2->EGR |= TIM_EGR_UG ;

/* SOMETHING ABOUT TIMER2 */
TIM2->CCMR1 |= TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_3 | TIM_CCMR1_OC2PE ;

The ADC-Mapping doesn't have to be in Direct-Register-Manipulation.

2) The 2 PWM signals must come from STM32F334 PB3 & PB4 (UNO Pin3 & Pin5).

3) The 4 Potentiometers feedback into ADC must go in STM32F334 PA0, PA1, PA4, PB0 (UNO Pin A0, A1, A2, A3 - respectively)
PWM at UNO Pin3 (STM32 PB3): potentiometer at A2 controls Frequency, A3 controls DutyC
PWM at UNO Pin5 (STM32 PB4): potentiometer at A0 controls Frequency, A1 controls DutyC
TIMx->ARR = (uint32_t)Structure->Period ;
TIMx->CCR2 = OC_Config->Pulse;



4) The CCRx must be always 1-clock-cycle smaller than ARR - to prevent 100% Duty Cycle

I have STM32CubeIDE

PB3 TIM2_CH2
PB4 TIM16_CH1 TIM3_CH1

https://stm32f4-discovery.net/2014/05/stm32f4-stm32f429-discovery-pwm-tutorial/
https://microtechnics.ru/en/stm32cube-stm-and-adc-analog-to-digital-converter/
https://deepbluembedded.com/stm32-pwm-example-timer-pwm-mode-tutorial/
http://www.emcu.eu/stm32-basic-timer/ - best of!!!

T = (1/APB_TIM_CLK in MHz) * (PRESCALER_Value + 1) * (PERIOD_Value + 1)


suppose:
APB_TIM_CLK = 8MHz
PRESCALER_Value = 999
PERIOD_Value = 7999
the formula is:
T= (1/8*10^6) * (999+1) * (7999+1) = 1s


PA0, PA1, 
PA4, PB0

3) The 4 Potentiometers feedback into ADC must go in 
STM32F334 
         F    C    F    C
         PA0, PA1, PA4, PB0 
(UNO Pin  A0, A1,  A2,  A3 - respectively)
PWM at UNO Pin3 (STM32 PB3): potentiometer at A2 controls Frequency, A3 controls DutyC
PWM at UNO Pin5 (STM32 PB4): potentiometer at A0 controls Frequency, A1 controls DutyC

PA0 - 
PA1 -
PA4 -
PB0 -

100KHz to 8Mhz


"uC_STMF334 Reference Manual - dm00093941-stm32f334xx-advanced-armbased-32bit-mcus-stmicroelectronics.pdf" 

1) TIMER setting must be written by direct register change and with comments
it is
2) CCRx value must be always 1 clock-cycle smaller than ARRx value to prevent flat high or flat low
done
3) PWM must have output frequency of 100KHz to 8Mhz and Duty Cycle from 1 clock-cycle to 99%. Variable resistor --> ADC mapping must be catered for this range.
np
4) TIMER at PB4 is not working
it is working, we tested it tigether

> The Refence manual page 50 says TIM2 is on APB1 which is limited at at 36Mhz. 
no, refernce manual says:

Several prescalers can be used to configure the AHB frequency, the high speed APB
(APB2) and the low speed APB (APB1) domains. The maximum frequency of the AHB and
APB2 domains is 72 MHz. The maximum allowed frequency of the APB1 domain is 36 MHz.

but TIMx use x2 so real timer clocks are 64Mhz look at PCCLK1, APB1 and APB1 x2 for TIMx at the CubeMX Clocks Page

> TIM1 and TIM16 are APB2 which can max out 72MHz. 


> Can you change PB4 from TIM2 to TIM16? Thanks. 
I chnaged from TIM16 to TIM4


> I test with this seperate setup and I got output at PB3, not PB4. 
> Also, with PB3, when I accidentally set CCR resistor > ARR resistor, I got high flat line. 
> I reversed CCR resistor but output won't go back, it stayed high flat. 
> I need away to limit CCR < ARR. Also, the frequency I need is 100Khz to 8MHz and duty cycle from 1 clock-cycle to 99%. 
> Currently the resistors are not limited into that frequency range.

sure, because prescaller set to 999 

That's it for now. I will be back online after several hours. See you!




